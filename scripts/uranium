#!/usr/bin/env python
# warmup should be added into everyone's root level repository. warmup will:
# * download and set up a virtualenv
# * install uranium
# * run uranium

VENV_URL = "https://pypi.python.org/packages/source/v/virtualenv/virtualenv-{major}.{minor}.{rev}.tar.gz"
VENV_MAJOR = 12
VENV_MINOR = 0
VENV_REV = 5

import io
import logging
import os
import shutil
import subprocess
import sys
import tarfile
import tempfile
from optparse import OptionParser

try:
    from urllib2 import urlopen as urlopen
except:
    from urllib.request import urlopen as urlopen

try:
    from io import StringIO
except:
    from StringIO import StringIO

LOGGER = logging.getLogger(__name__)

parser = OptionParser()
parser.add_option("--no-uranium", help="don't install uranium.",
                  default=True, action="store_false", dest="with_uranium")
parser.add_option("--uranium-dir",
                  help="specify a directory containing uranium source.")
parser.add_option("--version",
                  help="specify the version of uranium to install.")

URANIUM_TARGET = ".uranium"


def main(argv):
    options, args = parser.parse_args(argv)

    current_dir = os.getcwd()
    install_dir = os.path.join(current_dir, URANIUM_TARGET)
    uranium_dir = options.uranium_dir

    _install_virtualenv(install_dir)

    LOGGER.debug("activating virtualenv...")
    _activate_virtualenv(install_dir)

    os.chdir(current_dir)

    if options.with_uranium:
        LOGGER.info("setting up uranium...")
        _install_uranium(install_dir, uranium_dir=uranium_dir,
                         version=options.version)
        LOGGER.info("done!")

        LOGGER.debug("running uranium...")
        _run_uranium(install_dir)


def _install_virtualenv(install_dir):
    if _is_virtualenv(install_dir):
        return

    LOGGER.info("installing virtualenv...")

    temp_dir = tempfile.mkdtemp()
    try:
        _download_virtualenv(temp_dir)
        virtualenv_dir = os.path.join(temp_dir, "virtualenv-{major}.{minor}.{rev}".format(
            major=VENV_MAJOR, minor=VENV_MINOR, rev=VENV_REV
        ))
        virtualenv_executable = os.path.join(virtualenv_dir, 'virtualenv.py')
        os.chdir(virtualenv_dir)  # virtualenv only works in the cwd it is installed in
        subprocess.call([sys.executable, virtualenv_executable,
                         '--no-site-packages',
                         '--always-copy',
                         install_dir])
    finally:
        shutil.rmtree(temp_dir)


def _install_uranium(virtualenv_dir, uranium_dir=None, version=None):
    if uranium_dir:
        uranium_dir = os.path.expanduser(uranium_dir)

    log_file = os.path.join(virtualenv_dir, 'uranium_install_log.txt')
    pip_executable = os.path.join(virtualenv_dir, 'bin', 'pip')
    uranium_name = uranium_dir or 'uranium'

    if version and not uranium_dir:
        uranium_name = 'uranium=={0}'.format(version)

    with open(log_file, 'w+') as fh:
        status = subprocess.call([pip_executable, 'install', uranium_name,
                                  '--upgrade'], stdout=fh, stderr=fh)
        if status:
            LOGGER.error("Unable to install uranium. please look at {0} for more info".format(
                log_file
            ))
            exit(1)


def _run_uranium(virtualenv_dir):
    uranium_executable = os.path.join(virtualenv_dir, 'bin', 'uranium')
    subprocess.call([uranium_executable])


def _download_virtualenv(target_dir=None):
    target_dir = target_dir or os.path.abspath(os.curdir)
    venv_url = VENV_URL.format(
        major=VENV_MAJOR, minor=VENV_MINOR, rev=VENV_REV
    )
    _extract_tar(venv_url, target_dir)


def _extract_tar(url, target_dir):
    """ Return a bytesio object with a download bar """
    LOGGER.info("Downloading url: {0}".format(url))
    fileobj = io.BytesIO(urlopen(url).read())
    tf = tarfile.TarFile.open(fileobj=fileobj)
    LOGGER.info("extracting to {0}...".format(target_dir))
    tf.extractall(target_dir)


def _activate_virtualenv(install_dir):
    # if the pyvenv launcher environment variable is set, it causes the install directory
    # to be that directory.
    # we want the virtualenv directory to be the one we just created, so we remove
    # this variable
    if '__PYVENV_LAUNCHER__' in os.environ:
        del os.environ['__PYVENV_LAUNCHER__']

    # We don't need to do this... yet.
    # venv_activate_file = os.path.join(install_dir, 'bin', 'activate_this.py')
    # _execute_file(venv_activate_file)


VIRTUALENV_FILES = {
    'activate file': os.path.join('bin', 'activate')
}


def _is_virtualenv(path):
    """ validate if the path is already a virtualenv """
    for name, venv_path in VIRTUALENV_FILES.items():
        target_path = os.path.join(path, venv_path)
        if not os.path.exists(target_path):
            return False
    return True


def _execute_file(path):
    with open(path) as f:
        code = compile(f.read(), path, 'exec')
        exec(code, dict(__file__=path), {})


def _create_stdout_logger():
    """ create a logger to stdout """
    log = logging.getLogger(__name__)
    out_hdlr = logging.StreamHandler(sys.stdout)
    out_hdlr.setFormatter(logging.Formatter('%(message)s'))
    out_hdlr.setLevel(logging.INFO)
    log.addHandler(out_hdlr)
    log.setLevel(logging.INFO)


if __name__ == "__main__":
    _create_stdout_logger()
    main(sys.argv[1:])
